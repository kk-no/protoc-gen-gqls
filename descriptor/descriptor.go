package descriptor

import (
	"strings"
	"sync"

	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

type protoFiles map[string]*protoFile

type protoFile struct {
	source  *descriptorpb.FileDescriptorProto
	service services
	message messages
	enum    enums
}

func (p protoFile) GQL() string {
	return strings.Join([]string{
		p.service.GQL(),
		p.message.GQL(),
		p.enum.GQL(),
	}, "\n")
}

func (p protoFile) String() string {
	return "" // TODO: implements
}

// Load will load request and format the file into the output format.
func Load(req *plugin.CodeGeneratorRequest) (*plugin.CodeGeneratorResponse, error) {
	files := make(protoFiles)

	var wg sync.WaitGroup
	for _, f := range req.GetProtoFile() {
		f := f // stash

		protoFile := &protoFile{
			source: f,
		}

		wg.Add(1)
		go func() {
			defer wg.Done()
			protoFile.service = getServices(f.GetService())
		}()

		wg.Add(1)
		go func() {
			defer wg.Done()
			protoFile.message = getMessages(f.GetMessageType())
		}()

		wg.Add(1)
		go func() {
			defer wg.Done()
			protoFile.enum = getEnums(f.GetEnumType())
		}()

		files[protoFile.source.GetName()] = protoFile
	}
	wg.Wait()

	var res plugin.CodeGeneratorResponse

	for _, name := range req.GetFileToGenerate() {
		file := files[name]
		res.File = append(res.File, &plugin.CodeGeneratorResponse_File{
			Name:    proto.String(name + ".graphqls"),
			Content: proto.String("# Generated by protoc-gen-gqls.\n" + file.GQL()),
		})
	}

	return &res, nil
}
